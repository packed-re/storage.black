ENCRYPTION SCHEME
iv (optional) + hmac salt + hmac + ciphertext 
cipher header size with iv - 56 bytes
	without iv - 40 bytes (typically the stuff thats received from the client)

RESPONSE SCHEME
	- 1 byte containing (custom) response code
	- variable size data


SESSION SCHEME (add check in route for the size of the account id. it has to be exactly 32 bytes)
end_date (8 bytes) + rand_long (8 bytes) + account id (total 48 bytes, without padding)
enc key - base + ip

enc key derivation scheme - rand_long + account_id + base_enc_key (diff than above) + ip

account id is passed to session api and then discarded clientside. session api sets a HttpOnly cookie and acts as the new account id. doing GET on the route returns expire_date + encryption_key


Account is created only once a file is uploaded or once an activation code is used


GET /session
- Field "session". Session token retrieved from POST /sessions, in base64.
Returns encryption key for account data. Returns the byte 0 if expired.

POST /session
- Field "age". Time in seconds of how long the session should stay valid for. If 0 session never expires.
Returns a session token and encryption key for account data.
	- encryption_key - 32 bytes
	- token - atleast 48 bytes

GET /file
lists them

POST /file
(in $_FILES)
- Access
	- action_type - 1 byte (contains the code of the desired action to take. 0 to get contents, in which case FileContent is not provided/ignored, or 1 to upload data)
	- 7 bytes padding
	- account_id - 32 bytes (should be uploaded encrypted with the session encryption key, without padding)
	- session_token - 48 bytes realistically, but should always be sent last so as to leave the possibility of adding data to the session token in the future
- FileHeader
	- write_offset - 8 bytes
	- file_size - 8 bytes
	- encryption_key - 48 bytes (16 (iv) + 32 (enc key)) (this should be uploaded with no padding from the client)
	- file_data - up to 512 bytes (this is the metadata)
- FileContent
	- the raw content thats to be written to disk - variable size

POST /file
(in $_FILES)

- Meta // upload this all into one file and send a header that contains the size of Meta
	- Access
		- action - 1 byte - denotes whether to get or send file (0 to get, 1 to send).
		- finished - 1 byte - denotes whether the file has finished uploading. ignored when reading
		- 6 bytes padding
			- account_id - 32 bytes (should be uploaded encrypted with the session encryption key, without padding)
			- session_token - 48 bytes realistically, but should always be sent last so as to leave the possibility of adding data to the session token in the future
	- FileHeader
		- offset - 8 bytes
		- file_size - 8 bytes
		- encryption_key - 56 + 48 (104) bytes (16 (iv) + 32 (enc key)) (this should be uploaded with no padding from the client)
		- data_id - sha256 truncated (through xor) to 16 bytes (128 bit). TODO: Make the client generate (from the base key) and store the data_id for the root folder in localstorage (using session encryption key)
		- file_data - up to 512 bytes (this is the metadata)
- FileContent
	- the raw content thats to be written to disk - variable size
